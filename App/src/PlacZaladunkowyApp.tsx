import React, { useEffect, useMemo, useState } from "react";
import "./app.css";

type Dept = "Versand" | "Wareneingang" | "Möbel" | "Werkzeugbau";
type Role = "dispatcher" | "versand" | "wareneingang" | "mobel";
export type Truck = { id: string; rejestracja: string; dzial?: Dept; spedycja?: string; towar?: string; iloscPojemnikow?: string; eta?: string; uwagi?: string };
type BayState = "PUSTE" | "OCZEKUJE" | "START" | "KONIEC";
type Bay = { id: number; name: string; truck: Truck | null; status: BayState; operators: string[]; assignedAt?: string | null; startedAt?: string | null; endedAt?: string | null };
export type DoneTruck = Truck & { completedAt: string; bayId: number; bayName: string; startedAt?: string | null; endedAt?: string | null; durationMs?: number; operators?: string[] };

const ORDER: BayState[] = ["PUSTE", "OCZEKUJE", "START", "KONIEC"]; const next = (s: BayState) => (s === "KONIEC" ? "PUSTE" : ORDER[ORDER.indexOf(s) + 1]); const prev = (s: BayState) => (s === "PUSTE" ? "KONIEC" : ORDER[ORDER.indexOf(s) - 1]);
const LS_TR = "yard_mvp_trucks", LS_BY = "yard_mvp_bays2", LS_DN = "yard_mvp_done", LS_SLA = "yard_mvp_sla", LS_US = "yard_mvp_user", LS_OP = "yard_mvp_ops", LS_FN = "yard_mvp_ops_fn", LS_LN = "yard_mvp_lang", LS_CFG = "yard_mvp_cfg";
const BAYS = ["Silo","Kalthalle","Wareneingang","Tor 3 + Werkzeug","Versand Platz 1","Versand Platz 2","Versand Platz 3","Möbel"].map((name, i) => ({ id: i + 1, name }));
const useLS = <T,>(k: string, init: T) => { const [s, setS] = useState<T>(() => { try { const r = localStorage.getItem(k); return r ? JSON.parse(r) : init } catch { return init } }); useEffect(() => { try { localStorage.setItem(k, JSON.stringify(s)) } catch {} }, [k, s]); return [s, setS] as const };
const dur = (ms?: number) => { if (!ms || ms < 0) return "—"; const s = Math.floor(ms / 1e3), h = Math.floor(s / 3600), m = Math.floor((s % 3600) / 60), ss = s % 60; return h ? `${h} h ${m} min` : (m ? `${m} min` : `${ss} s`) };
const toast = (msg: string) => { const el = document.createElement("div"); el.textContent = msg; el.className = "toast"; document.body.appendChild(el); setTimeout(() => el.remove(), 2000) };
function Modal({ open, onClose, children }: { open: boolean; onClose: () => void; children: React.ReactNode }) { if (!open) return null; return (<div className="modal-backdrop" onClick={(e) => { if (e.target === e.currentTarget) onClose() }}><div className="modal"><button className="modal-close" onClick={onClose} aria-label="Close">✕</button>{children}</div></div>) }

const I = { pl:{roleDisp:"Dyspozytor",roleVersand:"Versand",roleWE:"Wareneingang",roleMobel:"Möbel",notLogged:"Niezalogowany",login:"Zaloguj",changeUser:"Zmień użytkownika",logout:"Wyloguj",ctaReset:"Reset",slaWait:"SLA Czeka (min)",slaLoad:"SLA Załadunek (min)",addManual:"Dodaj ręcznie",opsStatus:"Status operatorów",name:"Imię",status:"Status",function:"Funkcja",load:"Załadunek",unload:"Rozładunek",actions:"Akcje",setBreak:"Ustaw: Przerwa",backFree:"Wróć: Wolny",noOps:"Brak operatorów. Zaloguj operatora.",bay:"Plac",free:"Wolne",await:"Czeka na przyjazd",start:"Rozpoczęto załadunek",end:"Zakończono + dokumenty",noAssign:"Brak przypisania",assignTruck:"Przypisz ciężarówkę",assignOps:"Przypisz operatora",operators:"Operatorzy",sped:"Spedycja:",dept:"Dział:",cargo:"Towar:",cnt:"Ilość pojemników:",eta:"ETA:",notes:"Uwagi:",loadTime:"Czas załadunku:",state:"Status:",available:"Dostępne ciężarówki",search:"Szukaj...",ready:"Gotowe do przypisania",done:"Już załadowane ciężarówki",doneHint:"Lista zapełni się po przejściu procesu (KONIEC → PUSTE).",loginTitle:"Logowanie",firstName:"Imię",password:"Hasło",pin:"PIN (4)",rolePick:"Wybierz rolę",opFunc:"Wybierz funkcję",deptPick:"Wybierz dział",cancel:"Anuluj",confirm:"Potwierdź",move:"Przenieś",save:"Zapisz operatorów",add:"Dodaj",regReq:"Rejestracja *",cargoShort:"Towar",cntShort:"Ilość pojemników",notesShort:"Uwagi",added:"Dodano ciężarówkę",needName:"Podaj imię operatora",badName:"Nieprawidłowe imię",badPwd:"Nieprawidłowe hasło / PIN",loggedDisp:"Zalogowano jako dyspozytor",loggedOp:"Zalogowano",mustFree:"Musisz mieć status 'Wolny'",onlySelf:"Operator może dodać tylko siebie",max3:"Maks 3 operatorów",onlyFreeCan:"Tylko operator 'Wolny' może się przydzielić",assignedToast:(b:number)=>`Przydzielono Cię na ${BAYS.find(x=>x.id===b)?.name}`,confirmAssign:(b:number)=>`Potwierdź przydział — ${BAYS.find(x=>x.id===b)?.name}`,confirmMove:(a:number,b:number)=>`Przenieś — ${BAYS.find(x=>x.id===a)?.name} → ${BAYS.find(x=>x.id===b)?.name}`,truck:"Ciężarówka:",pickOps:"Wybierz operatorów (max 3, tylko Wolni)",opsTitlePick:(b:number)=>`Wybierz operatorów – ${BAYS.find(x=>x.id===b)?.name}`,opsTitleBoth:(b:number)=>`Wybierz ciężarówkę i operatorów – ${BAYS.find(x=>x.id===b)?.name}`,cleaned:"Wyczyszczono stan.",sla:"SLA"}, de:{roleDisp:"Disponent",roleVersand:"Versand",roleWE:"Wareneingang",roleMobel:"Möbel",notLogged:"Nicht angemeldet",login:"Anmelden",changeUser:"Benutzer wechseln",logout:"Abmelden",ctaReset:"Zurücksetzen",slaWait:"SLA Warten (Min)",slaLoad:"SLA Beladung (Min)",addManual:"Manuell hinzufügen",opsStatus:"Operatorstatus",name:"Name",status:"Status",function:"Funktion",load:"Beladung",unload:"Entladung",actions:"Aktionen",setBreak:"Status: Pause",backFree:"Zurück: Frei",noOps:"Keine Operatoren. Bitte anmelden.",bay:"Platz",free:"Frei",await:"Wartet auf Ankunft",start:"Beladung gestartet",end:"Beladung beendet + Dokumente",noAssign:"Keine Zuweisung",assignTruck:"LKW zuweisen",assignOps:"Operator zuweisen",operators:"Operatoren",sped:"Spedition:",dept:"Abteilung:",cargo:"Ware:",cnt:"Anzahl Behälter:",eta:"ETA:",notes:"Hinweise:",loadTime:"Beladezeit:",state:"Status:",available:"Verfügbare LKW",search:"Suchen...",ready:"Bereit zur Zuweisung",done:"Bereits beladen",doneHint:"Liste füllt sich nach Abschluss (ENDE → FREI).",loginTitle:"Anmeldung",firstName:"Name",password:"Passwort",pin:"PIN (4)",rolePick:"Rolle wählen",opFunc:"Funktion wählen",deptPick:"Abteilung wählen",cancel:"Abbrechen",confirm:"Bestätigen",move:"Verschieben",save:"Operatoren speichern",add:"Hinzufügen",regReq:"Kennzeichen *",cargoShort:"Ware",cntShort:"Anzahl Behälter",notesShort:"Hinweise",added:"LKW hinzugefügt",needName:"Bitte Namen eingeben",badName:"Ungültiger Name",badPwd:"Ungültiges Passwort / PIN",loggedDisp:"Als Disponent angemeldet",loggedOp:"Angemeldet",mustFree:"Du musst den Status 'Frei' haben",onlySelf:"Bediener kann nur sich selbst hinzufügen",max3:"Max. 3 Operatoren",onlyFreeCan:"Nur Bediener mit Status 'Frei' darf zuweisen",assignedToast:(b:number)=>`Du wurdest ${BAYS.find(x=>x.id===b)?.name} zugewiesen`,confirmAssign:(b:number)=>`Zuweisung bestätigen — ${BAYS.find(x=>x.id===b)?.name}`,confirmMove:(a:number,b:number)=>`Verschieben — ${BAYS.find(x=>x.id===a)?.name} → ${BAYS.find(x=>x.id===b)?.name}`,truck:"LKW:",pickOps:"Operatoren wählen (max. 3, nur Frei)",opsTitlePick:(b:number)=>`Operatoren wählen – ${BAYS.find(x=>x.id===b)?.name}`,opsTitleBoth:(b:number)=>`LKW und Operatoren wählen – ${BAYS.find(x=>x.id===b)?.name}`,cleaned:"Zustand bereinigt.",sla:"SLA"}} as const;

export default function App(){
  const [lang,setLang]=useLS<'pl'|'de'>(LS_LN,'pl'); const t=(k:keyof typeof I['pl'])=>I[lang][k] as any; const FREE_STATUS=lang==='pl'?'Wolny':'Frei'; const LOADING_PREFIX=lang==='pl'?'Ładuje na':'Lädt auf';
  const [cfg,setCfg]=useLS<any>(LS_CFG,null); useEffect(()=>{(async()=>{try{const r=await fetch('/accounts.json',{cache:'no-store'});if(r.ok)setCfg(await r.json())}catch{}})()},[]);
  const getDispatchers=()=>cfg?.dispatchers?.map((d:any)=>d.name)||[]; const checkDispatcher=(name:string,pwd:string)=>{const d=cfg?.dispatchers?.find((x:any)=>x.name===name);return d?d.password===pwd:false}; const getOpRec=(name:string)=>cfg?.operators?.find((o:any)=>o.name===name); const opFnOf=(name:string)=>getOpRec(name)?.function as ('load'|'unload'|undefined); const opPinOk=(name:string,pin:string)=>{const r=getOpRec(name);return !!r&&String(r.pin||'')===String(pin)};
  const BAY_ROLES:Record<Role,string[]>={dispatcher:BAYS.map(b=>b.name),versand:["Silo","Kalthalle","Tor 3 + Werkzeug","Versand Platz 1","Versand Platz 2","Versand Platz 3"],wareneingang:["Wareneingang","Silo","Tor 3 + Werkzeug"],mobel:["Möbel"]};
  const [tr,setTr]=useLS<Truck[]>(LS_TR,[]); const [by,setBy]=useLS<Bay[]>(LS_BY,BAYS.map(b=>({id:b.id,name:b.name,truck:null,status:'PUSTE',operators:[],assignedAt:null,startedAt:null,endedAt:null}))); const [dn,setDn]=useLS<DoneTruck[]>(LS_DN,[]); const [sla,setSla]=useLS<{waitMin:number;loadMin:number}>(LS_SLA,{waitMin:30,loadMin:45}); const [us,setUs]=useLS<{name:string;role:Role;func?:'load'|'unload'}|null>(LS_US,null); const [ops,setOps]=useLS<Record<string,string>>(LS_OP,{}); const [opsFn,setOpsFn]=useLS<Record<string,'load'|'unload'>>(LS_FN,{});
  const isDisp=us?.role==='dispatcher'; const isWorker=!!us&&us.role!=='dispatcher'; const ens=(n:string)=>setOps(p=>({...p,[n]:p[n]??FREE_STATUS})); const setOpSt=(n:string,s:string)=>setOps(p=>({...p,[n]:s})); useEffect(()=>{if(isWorker)ens(us!.name)},[us?.name,us?.role]);
  const [search,setSearch]=useState(''); const [role,setRole]=useState<Role>('versand'); const [func,setFunc]=useState<'load'|'unload'>('load'); const [pin,setPin]=useState(''); const [name,setName]=useState(''); const [pwd,setPwd]=useState('');
  const [addOpen,setAddOpen]=useState(false); const [f,setF]=useState<Truck>({id:'',rejestracja:'',dzial:'Versand',spedycja:'',towar:'',iloscPojemnikow:'',eta:'',uwagi:''});
  const [dlgBay,setDlgBay]=useState<Bay|null>(null); const [opsOnly,setOpsOnly]=useState(false); const [opsSel,setOpsSel]=useState<string[]>([]); const [selTruck,setSelTruck]=useState<string>('');
  type Confirm={open:false}|{open:true,kind:'assign',toBay:number,truck:Truck}|{open:true,kind:'move',from:number,to:number,truck:Truck}; const [confirm,setConfirm]=useState<Confirm>({open:false}); const [confirmOps,setConfirmOps]=useState<string[]>([]);

  const showBay=(name:string)=>{const r=us?.role; if(!r) return false; return BAY_ROLES[r].includes(name)}; const assigned=new Set(by.filter(b=>b.truck).map(b=>b.truck!.id)); const filterByRole=(t:Truck)=>{const r=us?.role; if(r==='versand')return t.dzial==='Versand'; if(r==='wareneingang')return t.dzial==='Wareneingang'; if(r==='mobel')return t.dzial==='Möbel'; return true}; const avail=useMemo(()=>{const L=tr.filter(t=>!assigned.has(t.id)).filter(filterByRole); if(!search.trim())return L; const s=search.toLowerCase(); return L.filter(t=>t.rejestracja.toLowerCase().includes(s)||(t.spedycja||'').toLowerCase().includes(s)||(t.towar||'').toLowerCase().includes(s))},[tr,search,by,us]);
  const TLABEL=(s:BayState)=>s==='PUSTE'?I[lang].free:s==='OCZEKUJE'?I[lang].await:s==='START'?I[lang].start:I[lang].end; const statusClass=(s:BayState)=>s==='PUSTE'?{badge:'badge text-free',wrap:''}:s==='OCZEKUJE'?{badge:'badge text-wait',wrap:'bg-wait'}:s==='START'?{badge:'badge text-start',wrap:'bg-start'}:{badge:'badge text-end',wrap:'bg-end'};

  function assign(bayId:number,truck:Truck,opsA?:string[]){ if(isWorker&&ops[us!.name]!==FREE_STATUS){toast(I[lang].onlyFreeCan);return} const O=(opsA&&opsA.length?opsA:(isWorker?[us!.name]:[])).slice(0,3); if(!O.every(n=>ops[n]===FREE_STATUS)){toast(I[lang].onlyFreeCan);return} O.forEach(ens); setBy(p=>p.map(b=>b.id===bayId?{...b,truck,operators:O,status:'OCZEKUJE',assignedAt:new Date().toISOString(),startedAt:null,endedAt:null}:b)); if(isWorker&&O.includes(us!.name))toast(I[lang].assignedToast(bayId)); setDlgBay(null); setOpsSel([]); setSelTruck(''); setOpsOnly(false) }
  function saveOps(bayId:number,opsA:string[]){ if(isWorker){ if(ops[us!.name]!==FREE_STATUS){toast(I[lang].mustFree);return} if(opsA.length>1||(opsA[0]&&opsA[0]!==us!.name)){toast(I[lang].onlySelf);return} } const O=(opsA||[]).slice(0,3); if(!O.every(n=>ops[n]===FREE_STATUS)){toast(I[lang].onlyFreeCan);return} O.forEach(ens); setBy(p=>p.map(b=>b.id===bayId?{...b,operators:O}:b)); toast(I[lang].save); setDlgBay(null); setOpsSel([]); setSelTruck(''); setOpsOnly(false) }
  function unassign(bayId:number){ setBy(p=>p.map(b=>b.id===bayId?{...b,truck:null,operators:[],status:'PUSTE',assignedAt:null,startedAt:null,endedAt:null}:b)); if(isWorker)setOpSt(us!.name,FREE_STATUS) }
  function cycle(bayId:number,dir:'next'|'prev'){ setBy(p=>p.map(b=>{ if(b.id!==bayId)return b; const ns=dir==='next'?next(b.status):prev(b.status); if(b.status!=='START'&&ns==='START'){ b.operators.forEach(n=>setOpSt(n,`${LOADING_PREFIX} ${b.name}`)); return{...b,status:ns,startedAt:new Date().toISOString(),endedAt:null} } if(b.status!=='KONIEC'&&ns==='KONIEC'){ return{...b,status:ns,endedAt:new Date().toISOString()} } if(b.truck&&b.status==='KONIEC'&&ns==='PUSTE'){ const st=b.startedAt?+new Date(b.startedAt):undefined,en=b.endedAt?+new Date(b.endedAt):undefined,d=st&&en?Math.max(0,en-st):undefined; const comp:DoneTruck={...b.truck,completedAt:new Date().toISOString(),bayId:b.id,bayName:b.name,startedAt:b.startedAt||null,endedAt:b.endedAt||null,durationMs:d,operators:b.operators}; setDn(q=>[comp,...q]); setTr(q=>q.filter(t=>t.id!==b.truck!.id)); b.operators.forEach(n=>setOpSt(n,FREE_STATUS)); return{...b,status:'PUSTE',truck:null,operators:[],assignedAt:null,startedAt:null,endedAt:null} } return{...b,status:ns} })) }
  function reset(){ setBy(BAYS.map(b=>({id:b.id,name:b.name,truck:null,status:'PUSTE',operators:[],assignedAt:null,startedAt:null,endedAt:null}))); setTr([]); setDn([]); setSla({waitMin:30,loadMin:45}); setOps(p=>Object.fromEntries(Object.keys(p).map(k=>[k,FREE_STATUS]))); setOpsFn({}); setSearch(''); toast(I[lang].cleaned) }
  function submit(){ const plate=f.rejestracja.trim(); if(!plate){toast(lang==='pl'?'Podaj rejestrację':'Kennzeichen eingeben');return} const T:Truck={id:String(Date.now()),rejestracja:plate,dzial:f.dzial,spedycja:f.spedycja?.trim()||undefined,towar:f.towar?.trim()||undefined,iloscPojemnikow:f.iloscPojemnikow?.trim()||undefined,eta:f.eta?.trim()||undefined,uwagi:f.uwagi?.trim()||undefined}; setTr(p=>[T,...p]); setF({id:'',rejestracja:'',dzial:'Versand',spedycja:'',towar:'',iloscPojemnikow:'',eta:'',uwagi:''}); setAddOpen(false); toast(I[lang].added) }
  function dragAvail(e:React.DragEvent,id:string){ e.dataTransfer.setData('text/plain',JSON.stringify({kind:'available',id})) } function dragBay(e:React.DragEvent,from:number,id:string){ e.dataTransfer.setData('text/plain',JSON.stringify({kind:'bay',from,id})) }
  function dropBay(e:React.DragEvent,to:number){ e.preventDefault(); try{ const p=JSON.parse(e.dataTransfer.getData('text/plain')); if(p.kind==='available'){ const t=tr.find(x=>x.id===p.id); if(!t)return; setConfirm({open:true,kind:'assign',toBay:to,truck:t}); setConfirmOps(isWorker?[us!.name]:[]) } else if(p.kind==='bay'){ const src=by.find(b=>b.id===p.from); if(!src||!src.truck||p.from===to)return; setConfirm({open:true,kind:'move',from:p.from,to,truck:src.truck}) } }catch{} }
  function move(from:number,to:number){ setBy(prev=>{ const src=prev.find(b=>b.id===from)!,dst=prev.find(b=>b.id===to)!; if(!src.truck)return prev; return prev.map(b=>{ if(b.id===from)return{...b,truck:dst.truck||null,operators:dst.operators||[],status:dst.truck?dst.status:'PUSTE',assignedAt:dst.assignedAt||null,startedAt:dst.startedAt||null,endedAt:dst.endedAt||null}; if(b.id===to)return{...b,truck:src.truck||null,operators:src.operators||[],status:src.status,assignedAt:src.assignedAt||new Date().toISOString(),startedAt:src.startedAt||null,endedAt:src.endedAt||null}; return b }) }) }

  return (<div className="container">
    <div className="toolbar">
      <div className="toolbar-left">
        <div className="fw-600">{us?`${us.name} (${us.role==='dispatcher'?I[lang].roleDisp:us.role==='versand'?I[lang].roleVersand:us.role==='wareneingang'?I[lang].roleWE:I[lang].roleMobel})`:I[lang].notLogged}</div>
        <div className="muted fs-12">{us&&(ops[us.name]||FREE_STATUS)}</div>
        <button className="btn" onClick={()=>setLang(lang==='pl'?'de':'pl')}>{lang==='pl'?'DE':'PL'}</button>
        <button className="btn" onClick={()=>setUs(null)}>{us?I[lang].changeUser:I[lang].login}</button>
        {us&&<button className="btn" onClick={()=>setUs(null)}>{I[lang].logout}</button>}
      </div>
      <div className="toolbar-right">
        {isDisp&&(<><div className="muted fs-12">{I[lang].slaWait}</div><input className="input w-70" type="number" value={sla.waitMin} onChange={e=>setSla({...sla,waitMin:Math.max(1,Number(e.target.value||1))})}/><div className="muted fs-12">{I[lang].slaLoad}</div><input className="input w-80" type="number" value={sla.loadMin} onChange={e=>setSla({...sla,loadMin:Math.max(1,Number(e.target.value||1))})}/><button className="btn" onClick={()=>setAddOpen(true)}>{I[lang].addManual}</button></>)}
        <button className="btn" onClick={reset}>{I[lang].ctaReset}</button>
      </div>
    </div>

    <div className="card">
      <div className="card-header"><span className="card-title">{I[lang].opsStatus}</span></div>
      <div className="card-body">
        {Object.keys(ops).length===0?(<div className="center-muted">{I[lang].noOps}</div>):(
          <table className="table"><thead><tr><th>{I[lang].name}</th><th>{I[lang].function}</th><th>{I[lang].status}</th><th>{I[lang].actions}</th></tr></thead><tbody>
            {Object.entries(ops).map(([n,st])=>{const me=us?.name===n; const fn=opsFn[n]||opFnOf(n)||'load'; const fnLabel=fn==='load'?I[lang].load:I[lang].unload; const can=me&&(st===FREE_STATUS||st==='Przerwa'||st==='Pause'); const dotClass=st===FREE_STATUS?'dot-green':(st==='Przerwa'||st==='Pause'?'dot-red':((st as string).startsWith('Ładuje')||(st as string).startsWith('Lädt')?'dot-blue':'dot-gray'));
              return(<tr key={n}><td><span className={`dot ${dotClass}`}/><b>{n}</b></td><td>{fnLabel}</td><td>{st}</td><td>{me?<button className="btn" disabled={!can} onClick={()=>setOps(p=>({...p,[n]:(st==='Przerwa'||st==='Pause')?FREE_STATUS:(lang==='pl'?'Przerwa':'Pause')}))}>{(st==='Przerwa'||st==='Pause')?I[lang].backFree:I[lang].setBreak}</button>:'—'}</td></tr>)})}
          </tbody></table>
        )}
      </div>
    </div>

    <div className="grid-bays">
      {by.filter(b=>showBay(b.name)).map(b=>{const st=b.startedAt?+new Date(b.startedAt):undefined; const en=b.endedAt?+new Date(b.endedAt):undefined; const live=b.status==='START'&&st?Date.now()-st:undefined; const wait=b.status==='OCZEKUJE'&&b.assignedAt?(Date.now()-+new Date(b.assignedAt)):undefined; const warnLoad=b.status==='START'&&live!=null&&live>sla.loadMin*60*1000; const warnWait=b.status==='OCZEKUJE'&&wait!=null&&wait>sla.waitMin*60*1000; const meta=statusClass(b.status);
        return(<div key={b.id} className="card" onDragOver={e=>e.preventDefault()} onDrop={e=>dropBay(e,b.id)} draggable={!!b.truck} onDragStart={e=>b.truck&&dragBay(e,b.id,b.truck.id)}>
          <div className={`card-header ${b.truck?meta.wrap:''}`}><b>{b.name}</b><span className={meta.badge}>{TLABEL(b.status)}{(warnLoad||warnWait)&&<span className="muted" style={{color:'#dc2626',marginLeft:6}}>⚠ {I[lang].sla}</span>}</span></div>
          <div className="card-body">
            {!b.truck?(<div className="center-muted"><div className="mb-8">{I[lang].noAssign}</div><div className="col" style={{gap:8,alignItems:'center'}}><button className="btn" onClick={()=>{setDlgBay(b);setOpsOnly(false);setOpsSel(isWorker?[us!.name]:[]);setSelTruck('')}}>{I[lang].assignTruck}</button><button className="btn" onClick={()=>{setDlgBay(b);setOpsOnly(true);setOpsSel(isWorker?[us!.name]:[]);setSelTruck('')}}>{I[lang].assignOps}</button></div></div>):(
              <div>
                <div className="row justify-between items-center mb-8"><div className="fw-600">{b.truck.rejestracja}</div><div className="row gap-8"><button className="btn" onClick={()=>{setDlgBay(b);setOpsOnly(true);setOpsSel(b.operators)}}>{I[lang].operators}</button><button className="btn" onClick={()=>unassign(b.id)} title="x">✖</button></div></div>
                <div className="muted mb-8 fs-12">{I[lang].operators}: {b.operators.length?b.operators.join(', '):'—'}</div>
                <div className="fs-12">
                  {b.truck.dzial&&<div><span className="muted">{I[lang].dept}</span> {b.truck.dzial}</div>}
                  {b.truck.spedycja&&<div><span className="muted">{I[lang].sped}</span> {b.truck.spedycja}</div>}
                  {b.truck.towar&&<div><span className="muted">{I[lang].cargo}</span> {b.truck.towar}</div>}
                  {(b.truck.iloscPojemnikow||b.truck.eta)&&(<div className="row gap-12 mt-8">{b.truck.iloscPojemnikow&&<span><span className="muted">{I[lang].cnt}</span> {b.truck.iloscPojemnikow}</span>}{b.truck.eta&&<span><span className="muted">{I[lang].eta}</span> {b.truck.eta}</span>}</div>)}
                  {b.truck.uwagi&&<div className="muted mt-8">{I[lang].notes} {b.truck.uwagi}</div>}
                </div>
                {(b.status==='START'||b.status==='KONIEC')&&(<div className="muted mt-8 fs-12">{I[lang].loadTime} <b>{dur(b.status==='START'?(st?Date.now()-st:undefined):(st&&en?en-st:undefined))}</b></div>)}
                <div className="row justify-between items-center mt-8"><div className="fs-12">{I[lang].state} <b>{TLABEL(b.status)}</b></div><div className="row gap-8"><button className="btn" onClick={()=>cycle(b.id,'prev')}>←</button><button className="btn" onClick={()=>cycle(b.id,'next')}>→</button></div></div>
              </div>
            )}
          </div>
        </div>)
      })}
    </div>

    <div className="card mt-16"><div className="card-header"><span className="card-title">{I[lang].available} ({avail.length})</span><div className="row gap-8 items-center">{isDisp&&<button className="btn" onClick={()=>setAddOpen(true)}>{I[lang].addManual}</button>}<input className="input" placeholder={I[lang].search} value={search} onChange={e=>setSearch(e.target.value)}/></div></div><div className="card-body">{avail.length===0?(<div className="center-muted">{I[lang].noAssign}</div>):(<div className="col gap-10">{avail.map(tk=>(<div key={tk.id} className="card p-10" draggable onDragStart={e=>dragAvail(e,tk.id)}><div className="row justify-between items-center"><div><div className="fw-600">{tk.rejestracja}</div><div className="muted fs-12">{(tk.dzial?tk.dzial+' • ':'')}{tk.spedycja||'—'} {tk.towar?`• ${tk.towar}`:''} {tk.eta?`• ETA ${tk.eta}`:''}</div></div><span className="badge">{I[lang].ready}</span></div></div>))}</div>)}</div></div>

    <div className="card mt-16"><div className="card-header"><span className="card-title">{I[lang].done}</span></div><div className="card-body">{dn.length===0?(<div className="center-muted">{I[lang].doneHint}</div>):(<div className="col gap-10">{dn.map(tk=>(<div key={tk.id+'-'+tk.completedAt} className="card p-10"><div className="row justify-between items-center"><div className="fw-600">{tk.rejestracja}</div><span className="badge">{tk.bayName}</span></div><div className="muted mt-8 fs-12">{(tk.dzial?tk.dzial+' • ':'')}{tk.spedycja||'—'} {tk.towar?`• ${tk.towar}`:''} {tk.iloscPojemnikow?`• ${tk.iloscPojemnikow} ${lang==='pl'?'szt.':'Stk.'}`:''}</div><div className="muted mt-8 fs-12">{I[lang].operators}: {tk.operators?.length?tk.operators.join(', '):'—'}</div><div className="muted mt-8 fs-12">{new Date(tk.completedAt).toLocaleString()} {tk.durationMs?`• ${dur(tk.durationMs)}`:''}</div></div>))}</div>)}</div></div>

    <Modal open={!!addOpen} onClose={()=>setAddOpen(false)}>
      <div className="card-title mb-8">{I[lang].addManual}</div>
      <div className="col gap-8"><input className="input" placeholder={I[lang].regReq} value={f.rejestracja} onChange={e=>setF({...f,rejestracja:e.target.value})}/><select className="select" value={f.dzial} onChange={e=>setF({...f,dzial:e.target.value as Dept})}><option value='Versand'>Versand</option><option value='Wareneingang'>Wareneingang</option><option value='Möbel'>Möbel</option><option value='Werkzeugbau'>Werkzeugbau</option></select><input className="input" placeholder={I[lang].sped.replace(':','')} value={f.spedycja} onChange={e=>setF({...f,spedycja:e.target.value})}/><input className="input" placeholder={I[lang].cargoShort} value={f.towar} onChange={e=>setF({...f,towar:e.target.value})}/><input className="input" placeholder={I[lang].cntShort} value={f.iloscPojemnikow} onChange={e=>setF({...f,iloscPojemnikow:e.target.value})}/><input className="input" placeholder={I[lang].eta.replace(':','')} value={f.eta} onChange={e=>setF({...f,eta:e.target.value})}/><input className="input" placeholder={I[lang].notesShort} value={f.uwagi} onChange={e=>setF({...f,uwagi:e.target.value})}/></div>
      <div className="row justify-between mt-8"><button className="btn" onClick={()=>setAddOpen(false)}>{I[lang].cancel}</button><button className="btn" onClick={submit}>{I[lang].add}</button></div>
    </Modal>

    {/* LOGIN */}
    <Modal open={!us} onClose={()=>{}}>
      <div className="card-title mb-8">{I[lang].loginTitle}</div>
      <div className="col gap-8"><select className="select" value={role} onChange={e=>setRole(e.target.value as Role)}><option value='dispatcher'>{I[lang].roleDisp}</option><option value='versand'>{I[lang].roleVersand}</option><option value='wareneingang'>{I[lang].roleWE}</option><option value='mobel'>{I[lang].roleMobel}</option></select><input className="input" placeholder={I[lang].firstName} value={name} onChange={e=>setName(e.target.value)}/>{role==='dispatcher'&&<input className="input" type='password' placeholder={I[lang].password} value={pwd} onChange={e=>setPwd(e.target.value)}/>} {role!=='dispatcher'&&(<><input className="input" placeholder={I[lang].pin} value={pin} maxLength={4} onChange={e=>setPin(e.target.value)}/><select className="select" value={func} onChange={e=>setFunc(e.target.value as any)}><option value='load'>{I[lang].load}</option><option value='unload'>{I[lang].unload}</option></select></>)} </div>
      <div className="row justify-between mt-8"><button className="btn" onClick={()=>{}}>{I[lang].cancel}</button><button className="btn" onClick={()=>{ if(role==='dispatcher'){ if(!name.trim()||!getDispatchers().includes(name)){toast(I[lang].badName);return} if(!(checkDispatcher(name,pwd))){toast(I[lang].badPwd);return} setUs({name,role:'dispatcher'}); toast(I[lang].loggedDisp) } else { if(!name.trim()){toast(I[lang].needName);return} const rec=getOpRec(name); if(!rec||rec.role!==role){toast(I[lang].badName);return} if(!pin||pin.length!==4||!opPinOk(name,pin)){toast(I[lang].badPwd);return} setUs({name,role,func}); ens(name); setOpsFn(p=>({...p,[name]:func})); toast(I[lang].loggedOp) } }}>{I[lang].login}</button></div>
    </Modal>

    {/* ASSIGN/MOVE CONFIRM (DnD) */}
    <Modal open={confirm.open} onClose={()=>setConfirm({open:false})}>
      {confirm.open&&(<div><div className="card-title mb-8">{confirm.kind==='assign'?I[lang].confirmAssign((confirm as any).toBay):I[lang].confirmMove((confirm as any).from,(confirm as any).to)}</div><div className="muted fs-12 mb-8">{I[lang].truck} {(confirm as any).truck.rejestracja}</div>{confirm.kind==='assign'?(<div><div className="fs-12 mb-8">{I[lang].pickOps}</div><div className="row wrap gap-8 mt-8">{Object.entries(ops).map(([n,st])=>{const dis=st!==FREE_STATUS; const sel=confirmOps.includes(n); const fnL=(opsFn[n]||opFnOf(n)||'load')==='load'?I[lang].load:I[lang].unload; return(<button key={n} className={`pill ${sel?'is-selected':''}`} disabled={dis} onClick={()=>setConfirmOps(p=>sel?p.filter(x=>x!==n):(p.length>=3?p:[...p,n]))}>{n}<span className="muted fs-10" style={{marginLeft:4}}>{fnL}</span></button>)})}</div><div className="row justify-between mt-8"><button className="btn" onClick={()=>setConfirm({open:false})}>{I[lang].cancel}</button><button className="btn" onClick={()=>{assign((confirm as any).toBay,(confirm as any).truck,confirmOps);setConfirm({open:false})}}>{I[lang].confirm}</button></div></div>):(<div className="row justify-between mt-8"><button className="btn" onClick={()=>setConfirm({open:false})}>{I[lang].cancel}</button><button className="btn" onClick={()=>{move((confirm as any).from,(confirm as any).to);setConfirm({open:false})}}>{I[lang].move}</button></div>)}</div>)}
    </Modal>

    {/* ASSIGN DIALOG (click buttons) */}
    <Modal open={!!dlgBay} onClose={()=>{setDlgBay(null);setOpsSel([]);setSelTruck('');setOpsOnly(false)}}>
      {dlgBay&&(<div>
        <div className="card-title mb-8">{opsOnly?I[lang].opsTitlePick(dlgBay.id):I[lang].opsTitleBoth(dlgBay.id)}</div>
        {!opsOnly&&(
          <div className="col gap-10 mb-8">
            {avail.length===0?(<div className="center-muted">{I[lang].noAssign}</div>):avail.map(tk=>(
              <div key={tk.id} className={`card p-10 ${selTruck===tk.id?'is-selected':''}`} onClick={()=>setSelTruck(tk.id)} style={{cursor:'pointer'}}>
                <div className="row justify-between items-center"><div><div className="fw-600">{tk.rejestracja}</div><div className="muted fs-12">{(tk.dzial?tk.dzial+' • ':'')}{tk.spedycja||'—'} {tk.towar?`• ${tk.towar}`:''} {tk.eta?`• ETA ${tk.eta}`:''}</div></div><span className="badge">{selTruck===tk.id?'✓':' '}</span></div>
              </div>
            ))}
          </div>
        )}
        <div className="fs-12 mb-8">{I[lang].pickOps}</div>
        <div className="row wrap gap-8 mt-8">{Object.entries(ops).map(([n,st])=>{const dis=st!==FREE_STATUS; const sel=opsSel.includes(n); const fnL=(opsFn[n]||opFnOf(n)||'load')==='load'?I[lang].load:I[lang].unload; return(<button key={n} className={`pill ${sel?'is-selected':''}`} disabled={dis} onClick={()=>setOpsSel(p=>sel?p.filter(x=>x!==n):(p.length>=3?p:[...p,n]))}>{n}<span className="muted fs-10" style={{marginLeft:4}}>{fnL}</span></button>)})}</div>
        <div className="row justify-between mt-8"><button className="btn" onClick={()=>{setDlgBay(null);setOpsSel([]);setSelTruck('');setOpsOnly(false)}}>{I[lang].cancel}</button><button className="btn" onClick={()=>{ if(opsOnly){ saveOps(dlgBay.id,opsSel) } else { const t=tr.find(x=>x.id===selTruck); if(!t){toast(I[lang].noAssign);return} assign(dlgBay.id,t,opsSel) } }}>{I[lang].confirm}</button></div>
      </div>)}
    </Modal>
  </div>)
}
